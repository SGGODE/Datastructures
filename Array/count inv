  public:
    // arr[]: Input Array
    // N : Size of the Array arr[]
    // Function to count inversions in the array.
     typedef long long ll;
    long long inv=0;
    void merge(long long arr[], long long s,long long m,long long e){
    long long n1=m-s+1;
    long long n2=e-m;
    long long first[n1];
    long long second[n2];
    long long k=s;
    for(long long i=0;i<n1;i++){
        first[i]=arr[k+i];
    }
    for(long long i=0;i<n2;i++){
        second[i]=arr[m+1+i];
    }
    ll i=0,j=0;
    k=s;
    while(i<n1 && j<n2){
        if(first[i]<=second[j])
         arr[k++]=first[i++];
        else{
            inv+=(n1-i);
         arr[k++]=second[j++];
        }
    }
    while(i<n1){
        arr[k++]=first[i++];
    }
    while(j<n2){
        arr[k++]=second[j++];
    }
   // return inv;
    }
   void mergesort(long long arr[], long long s,long long e){
      // long long inv=0;
        if(s<e){
            long long mid=s+(e-s)/2;
           mergesort(arr,s,mid);
           mergesort(arr,mid+1,e);
           merge(arr,s,mid,e);
        }
     // return inv; 
    }
    long long int inversionCount(long long arr[], long long N)
    {
        // Your Code Here
       //long long int inv=0;
        mergesort(arr,0,N-1);
        return inv;
    }
