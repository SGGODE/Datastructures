3Sum
Medium

17984

1727

Add to List

Share
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Example 2:

Input: nums = []
Output: []
Example 3:

Input: nums = [0]
Output: []
 

Constraints:

0 <= nums.length <= 3000
-105 <= nums[i] <= 105


my one solution

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
      int n=nums.size();
       vector<int> p;
        sort(nums.begin(),nums.end());
        vector<vector<int>> v;
        for(int i=0;i<n;i++){
            int j=i+1;
            int k=n-1;
            if(i>0&&nums[i]==nums[i-1])
                continue;
            while(j<k){
                if(k<(n-1)&&nums[k]==nums[k+1]){
                    k--;
                    continue;
                }
                else if(nums[i]+nums[j]+nums[k]>0)
                     k--;
                else if(nums[i]+nums[j]+nums[k]<0)
                    j++;
                else{
                    p={nums[i],nums[j],nums[k]};
                    sort(p.begin(),p.end());
                    v.push_back(p);
                    j++;
                    k--;
                }
            }
        }
        return v;
    }
};
