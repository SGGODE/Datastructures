merge sort logic
class Solution{
  public:
    //Function to sort the given linked list using Merge Sort.
    Node* mergeSort(Node* head){
    if(head==NULL||head->next==NULL)
      return head;
    Node* mid=middle(head);
    Node* head2=mid->next;
    mid->next=NULL;
    Node* first=mergeSort(head);
    Node* second=mergeSort(head2);
    return merge(first,second);
}
    Node* middle(Node* head){
    Node* slow=head;
    Node* fast=head;
    while(fast->next!=NULL&&fast->next->next!=NULL){
        slow=slow->next;
        fast=fast->next->next;
    }
    return slow;
}
    Node* merge(Node* first,Node* second) {
        // your code here
    
    Node* head=new Node(-1);
    head->next=NULL;
    Node* temp=head;
    while(first&&second){
        if(first->data<second->data){
            temp->next=first;
            first=first->next;
        }
        else{
            temp->next=second;
            second=second->next;
        }
        temp=temp->next;
    }
    if(first){
            temp->next=first;
    }
    if(second){
            temp->next=second;
    }
    return head->next;
    }
};

