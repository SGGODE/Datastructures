Given a string s, return the number of palindromic substrings in it.

A string is a palindrome when it reads the same backward as forward.

A substring is a contiguous sequence of characters within the string.

 

Example 1:

Input: s = "abc"
Output: 3
Explanation: Three palindromic strings: "a", "b", "c".
Example 2:

Input: s = "aaa"
Output: 6
Explanation: Six palindromic strings: "a", "a", "a", "aa", "aa", "aaa".
 

Constraints:

1 <= s.length <= 1000
s consists of lowercase English letters.

soluction
two pointer approach
   to know a perfect palondromic string
   
class Solution {
public:
    int countSubstrings(string s) {
        int c=0;
        int l,r;
        for(int i=0;i<s.size();i++){
            l=r=i;
            while(l>=0&&r<s.size()&&s[l]==s[r]){
                c++;
                l-=1;
                r+=1;
            }
            l=i;
            r=i+1;
           while(l>=0&&r<s.size()&&s[l]==s[r]){
                c++;
                l-=1;
                r+=1;
            }
        }
        return c;
    }
};
