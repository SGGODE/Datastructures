Medium

23905

1063

Add to List

Share
Given a string s, find the length of the longest substring without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.





class Solution {
public:
int lengthOfLongestSubstring(string str) {
set<char>s;
int n=str.length(),x=s.size(),maxL=0;
    for(int i=0;i<n;i++){
       for(int j=i;j<n;j++){
         s.insert(str[j]);
          //if str[j] is non-repeating it'll increase set size
          if(s.size()>x){
            x=s.size();
             if(x>maxL)
             maxL=x;
          }
       else{
          s.clear();
            x=0;
         break;
       }
    }
 }
    return maxL;
  }
};

best optimal
class Solution {
public:
int lengthOfLongestSubstring(string str) {
   unordered_map<char,int> m;
    int i=0,j=0,window_len=0,max_window_len=0,start_window=-1;
    while(j<str.length()){
        char ch=str[j];
        if(m.count(ch) and m[ch]>=i){
            i=m[ch]+1;
            window_len=j-i;
        }
        m[ch]=j;
        window_len++;
        j++;
        if(window_len>max_window_len){
            max_window_len=window_len;
            start_window=i;
        }
    }
    return max_window_len;
  }
};
