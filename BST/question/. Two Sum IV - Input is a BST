class Solution {
private:
    void inorder(TreeNode* root,vector<int>&v){
        if(root==NULL)
            return;
        if(root->left)
            inorder(root->left,v);
        v.push_back(root->val);
        if(root->right)
            inorder(root->right,v);
    }
public:
    bool findTarget(TreeNode* root, int k) {
        vector<int>v;
        inorder(root,v);
        int s=0;
        int e=v.size()-1;
        while(s<e){
            if(v[s]+v[e]==k)
                return 1;
            else if(v[s]+v[e]>k)
                e--;
            else
                s++;
        }
        return 0;
    }
};

Given the root of a Binary Search Tree and a target number k, return true if there exist two elements in the BST such that their sum is equal to the given target.

 

Example 1:


Input: root = [5,3,6,2,4,null,7], k = 9
Output: true
Example 2:


Input: root = [5,3,6,2,4,null,7], k = 28
Output: false
