A celebrity is a person who is known to all but does not know anyone at a party. If you go to a party of N people, find if there is a celebrity in the party or not.
A square NxN matrix M[][] is used to represent people at the party such that if an element of row i and column j  is set to 1 it means ith person knows jth person. Here M[i][i] will always be 0.
Note: Follow 0 based indexing.
 

Example 1:

Input:
N = 3
M[][] = {{0 1 0},
         {0 0 0}, 
         {0 1 0}}
Output: 1
Explanation: 0th and 2nd person both
know 1. Therefore, 1 is the celebrity. 

class Solution 
{
    public:
    //Function to find if there is a celebrity in the party or not.
    int celebrity(vector<vector<int> >& M, int n) 
    {
        // code here 
        unordered_map<int,int> v;
       unordered_map<int,int> s;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(M[i][j]==1){
                 v[i]++;
                 s[j]++;
                }
            }
        }
        for(int i=0;i<n;i++){
           if(v[i]==0&&s[i]==n-1){
               return i;
           }
        }
          return -1;
    }
};


my first view not wrong one

class Solution 
{
    public:
    //Function to find if there is a celebrity in the party or not.
    int celebrity(vector<vector<int> >& M, int n) 
    {
        // code here 
        map<int,int> s;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(M[i][j]==1)
                  s[j]++;
            }
        }
        int m=0,j=0;
        for(auto i:s){
           if(i.second>m){
               m=i.second;
               j=i.first;
           }
        }
        if(j==0)
          return -1;
        return j;
    }
};
