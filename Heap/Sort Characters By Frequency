Medium

4127

181

Add to List

Share
Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.

Return the sorted string. If there are multiple answers, return any of them.

 

Example 1:

Input: s = "tree"
Output: "eert"
Explanation: 'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
Example 2:

Input: s = "cccaaa"
Output: "aaaccc"
Explanation: Both 'c' and 'a' appear three times, so both "cccaaa" and "aaaccc" are valid answers.
Note that "cacaca" is incorrect, as the same characters must be together.
Example 3:

Input: s = "Aabb"
Output: "bbAa"
Explanation: "bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.
 

Constraints:

1 <= s.length <= 5 * 105
s consists of uppercase and lowercase English letters and digits.

this problem is slve with help of map and priority queue


class Solution {
public:
    string frequencySort(string s) {
       map<char,int> yes;
        for(int i=0;i<s.size();i++){
            yes[s[i]]++;
        }
         priority_queue<pair<int,char>> count;
        for(auto i=yes.begin();i!=yes.end();i++){
            count.push({i->second,i->first});
        }
        s.clear();
        while(!count.empty()){
            int fr=count.top().first;
            int elei=count.top().second;
            for(int i=1;i<=fr;i++){
                s.push_back(elei);
            }
            count.pop();
        }
        return s;
       
    }
};
