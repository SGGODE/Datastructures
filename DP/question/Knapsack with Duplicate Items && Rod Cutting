int fun(int val[],int wt[],int index,int W,vector<vector<int>>&dp){
       if(index==0){
         return (val[0])*(W/wt[index]);
           //return 0;
       }
       if(dp[index][W]!=-1)return dp[index][W];
       int nottake=0+fun(val,wt,index-1,W,dp);
       int take=INT_MIN;
       if(wt[index]<=W){
           take=val[index]+fun(val,wt,index,W-wt[index],dp);
       }
       return dp[index][W]=max(take,nottake);
   }
public:
    int knapSack(int n, int W, int val[], int wt[])
    {
        // code here
        vector<vector<int>>dp(n,vector<int>(W+1,-1));
        return fun(val,wt,n-1,W,dp);
    }
    
    
     int fun(int price[],int index,int n,vector<vector<int>>&dp){
        if(index==0){
            if(n>=1)return price[0]*n;
            return 0;
        }
        if(dp[index][n]!=-1)return dp[index][n];
        int nottake=0+fun(price,index-1,n,dp);
        int take=INT_MIN;
        if(index+1<=n){
            take=price[index]+fun(price,index,n-(index+1),dp);
        }
        return dp[index][n]=max(nottake,take);
    }
  public:
    int cutRod(int price[], int n) {
        //code here
        int sum=0;
        for(int i=0;i<n;i++)sum+=price[i];
        vector<vector<int>>dp(n,vector<int>(sum+1,-1));
        return fun(price,n-1,n,dp);
    }
