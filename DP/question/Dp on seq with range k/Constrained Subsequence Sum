class Solution {
public:
    int constrainedSubsetSum(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int>dp(n,0);
        int mod = 1e9+7;
        priority_queue<pair<int,int>>pq;
        int sum = 0;
        int res = nums[0];
        pq.push({nums[0],0});
        dp[0]=nums[0];
        for(int i=1;i<nums.size();i++){
             dp[i]=nums[i];
             while(!pq.empty()&&pq.top().second<(i-k))pq.pop();
             if(!pq.empty())sum = (pq.top().first + nums[i])%mod;
             dp[i] = max(dp[i],sum);
             pq.push({dp[i],i});
        }
        return *max_element(dp.begin(),dp.end());
    }
};
