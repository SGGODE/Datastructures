   s1-s2==d
   s1=total-s2;
   total-s2-s2=d;
   total-d=2s2
   s2=total-d/2
   
   int mod=1e9+7;
     int sub(int sum,vector<int>&arr,int index,vector<vector<int>>&dp){
       if(index==0){
             if(sum==0&&arr[0]==0)return 2;
             if(sum==0||arr[0]==sum)return 1;
             return 0;
        }
         if(dp[index][sum]!=-1)return dp[index][sum];
         int np=sub(sum,arr,index-1,dp);
         int p=0;
         if(sum>=arr[index]){
             p=sub(sum-arr[index],arr,index-1,dp);
         }
       return dp[index][sum]=(p+np)%mod;
     }
  public:
    int countPartitions(int n, int d, vector<int>& arr) {
        // Code here
        long long int total=0;
        for(auto it:arr)total+=it;
        if(((total-d)<0)||(total-d)%2==1)return 0;
        long long int sum=(total-d)/2;
        vector<vector<int>>dp(n+1,vector<int>(sum+1,-1));
        return sub(sum,arr,n-1,dp);
        
    }
