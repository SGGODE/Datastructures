Memoization FROM RECURSIVE WAY
frog that can jump max 2 step at a time

#include <iostream>
#include<bits/stdc++.h>
using namespace std;
int get(int arr[],int *dp,int idx){
    if(idx==0)
     return 0;
    if(dp[idx]!=0)
     return dp[idx];
    int left=get(arr,dp,idx-1)+abs(arr[idx]-arr[idx-1]);
    int right=INT_MAX;
    if(idx>1){
        right=get(arr,dp,idx-2)+abs(arr[idx]-arr[idx-2]);
    }
    return dp[idx]=min(left,right);
}
int main()
{
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    int dp[n+1]={0};
    get(arr,dp,n);
    for(int i=0;i<n;i++){
        cout<<dp[i]<<" ";
    }
    return 0;
}

Tabulation

#include <iostream>
#include<bits/stdc++.h>
using namespace std;
/*int get(int arr[],int *dp,int idx){
    if(idx==0)
     return 0;
    if(dp[idx]!=0)
     return dp[idx];
    int left=get(arr,dp,idx-1)+abs(arr[idx]-arr[idx-1]);
    int right=INT_MAX;
    if(idx>1){
        right=get(arr,dp,idx-2)+abs(arr[idx]-arr[idx-2]);
    }
    return dp[idx]=min(left,right);
}*/
int main()
{
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    int dp[n+1]={0};
    dp[0]=0;
    for(int i=1;i<n;i++){
        int left=dp[i-1]+abs(arr[i]-arr[i-1]);
        int right=INT_MAX;
        if(i>1){
             right=dp[i-2]+abs(arr[i]-arr[i-2]);
        }
        dp[i]=min(left,right);
    }
    //get(arr,dp,n);
    for(int i=0;i<n;i++){
        cout<<dp[i]<<" ";
    }
    return 0;
}

