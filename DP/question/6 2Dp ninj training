..memonization
int get(vector<vector<int>>&points,vector<vector<int>>&dp,int idx,int last){
     if(idx==0){
         int maxi=0;
         for(int i=0;i<3;i++){
             if(i!=last){
                 maxi=max(maxi,points[0][i]);
             }
         }
         return maxi;
     }
     if(dp[idx][last]!=-1){
         return dp[idx][last];
     }
     int maxi=0;
     for(int i=0;i<3;i++){
         int point=0;
         if(i!=last){
             point=points[idx][i]+get(points,dp,idx-1,i);
             maxi=max(maxi,point);
         }
     }
     return dp[idx][last]=maxi;
 }

int ninjaTraining(int n, vector<vector<int>> &points)
{
    vector<vector<int>>dp(n,vector<int>(4,-1));
    return get(points,dp,n-1,3);
}

//tabulation
int ninjaTraining(int n, vector<vector<int>> &points)
{
    vector<vector<int>>dp(n,vector<int>(4,-1));
    dp[0][0]=max(points[0][1],points[0][2]);
    dp[0][1]=max(points[0][0],points[0][2]);
    dp[0][2]=max(points[0][0],points[0][1]);
    dp[0][3]=max(points[0][0],max(points[0][1],points[0][2]));
    for(int i=1;i<n;i++){
        for(int j=0;j<4;j++){
            dp[i][j]=0;
            for(int k=0;k<3;k++){
                if(k!=j){
                 dp[i][j]=max(dp[i][j],points[i][k]+dp[i-1][k]);
                }
            }
        }
    }
    return dp[n-1][3];
}
