int minDifference(int arr[], int n)  { 
	    // Your code goes here
	    int sum=0;
	   // if(n==2){
	   //    if(arr[0]==10&&arr[1]==2)return 2;
	   // }
	   if(n==1)return arr[0];
	    for(int i=0;i<n;i++)sum+=arr[i];
	    vector<vector<bool>>dp(n,vector<bool>(sum+1,0));
	    for(int i=0;i<n;i++)dp[i][0]=1;
	    if(sum>=arr[0])dp[0][arr[0]]=1;
	    for(int i=1;i<n;i++){
	        for(int j=1;j<=sum;j++){
	            int nottake=dp[i-1][j];
	            int take=0;
	            if(j>=arr[i]){
	                take=dp[i-1][j-arr[i]];
	            }
	            dp[i][j]=take||nottake;
	        }
	    }
	    int mindiff=INT_MAX;
	    for(int i=0;i<=sum+1;i++){
	        if(dp[n-1][i]==1){
	            mindiff=min(mindiff,abs((sum-i)-i));
	        }
	    }
	   // sort(prefix.begin(),prefix.end());
	   // vector<int>suffix(prefix);
	   // reverse(suffix.begin(),suffix.end());
	   // int x=prefix.size();
	   // int mindiff=INT_MAX;
	   //// for(auto it:prefix)cout<<it<<" ";
	   //// cout<<endl;
	   //// for(auto it:suffix)cout<<it<<" ";
	   //// cout<<endl;
	   // for(int i=0;i<x;i++){
	   //     if(abs(suffix[i]-prefix[i])<mindiff){
	   //         mindiff=abs(suffix[i]-prefix[i]);
	   //     }
	   // }
	    return mindiff;
	} 
