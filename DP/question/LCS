//recursion
int sub(int i1,int i2,string s1,string s2,vector<vector<int>>&dp){
        if(i1<0||i2<0)return 0;
        if(dp[i1][i2]!=-1)return dp[i1][i2];
         if(s1[i1]==s2[i2]){
             return 1+sub(i1-1,i2-1,s1,s2,dp);
         }
        return dp[i1][i2]=0+max(sub(i1-1,i2,s1,s2,dp),sub(i1,i2-1,s1,s2,dp));
 }
 
 //tabulation
 int longestCommonSubsequence(string s1, string s2) {
      int x=s1.size();
      int y=s2.size();
       vector<vector<int>>dp(x+1,vector<int>(y+1,0));
        //sub(x-1,y-1,s1,s2,dp);
        for(int i=1;i<=x;i++){
            for(int j=1;j<=y;j++){
                if(s1[i-1]==s2[j-1]){
                    dp[i][j]=dp[i-1][j-1]+1;
                }else{
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
 }

//print all possible subseq

	vector<string> all_longest_common_subsequences(string s, string t)
		{
		    // Code here
		    int n=s.size();
		    int m=t.size();
		    vector<vector<int>>dp(n+1,vector<int>(m+1,0));
		    for(int i=1;i<=n;i++){
		        for(int j=1;j<=m;j++){
		            if(s[i-1]==t[j-1]){
		                dp[i][j]=dp[i-1][j-1]+1;
		            }else{
		                dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
		            }
		        }
		    }
		    set<string>res;
		    queue<pair<pair<int,int>,string>>pq;
		    pq.push({{n,m},""});
		    while(!pq.empty()){
		        int row=pq.front().first.first;
		        int col=pq.front().first.second;
		        string x=pq.front().second;
		        pq.pop();
		        if(row<=0||col<=0){
		            reverse(x.begin(),x.end());
		            res.insert(x);
		            continue;
		        }
		        if(s[row-1]==t[col-1]){
		            x.push_back(s[row-1]);
		            pq.push({{row-1,col-1},x});
		        }else{
		            if(dp[row][col]==dp[row-1][col]){
		                pq.push({{row-1,col},x});
		            }
		            if(dp[row][col]==dp[row][col-1]){
		                pq.push({{row,col-1},x});
		            }
		        }
		    }
		    vector<string>result(res.begin(),res.end());
		    return result;
		}
