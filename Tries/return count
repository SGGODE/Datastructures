#include <bits/stdc++.h> 
class Node{
    public:
    Node* links[26];
    int endword=0;
    int countprefix=0;
    bool contain(char ch){
        return links[ch-'a']!=NULL;
    }
    void put(char ch,Node* node){
        links[ch-'a']=node;
    }
    Node* get(char ch){
        return links[ch-'a'];
    }
    void end(){
        ++endword;
    }
    void prefix(){
        ++countprefix;
    }
    void eraseend(){
        --endword;
    }
    void eraseprefix(){
        --countprefix;
    }
    int wordcount(){
        return endword;
    }
    int prefixcount(){
        return countprefix;
    }
};
class Trie{
  private:
     Node* root;
    public:

    Trie(){
        // Write your code here.
        root = new Node();
    }

    void insert(string &word){
        // Write your code here.
        Node* node=root;
        for(int i=0;i<word.size();i++){
            if(!node->contain(word[i])){
                node->put(word[i],new Node());
            }
            node=node->get(word[i]);
            node->prefix();
        }
        node->end();
    }

    int countWordsEqualTo(string &word){
        // Write your code here.
         Node* node=root;
        for(int i=0;i<word.size();i++){
            if(!node->contain(word[i])){
                return 0;
            }
            node=node->get(word[i]);
           // node->prefixcount();
        }
        return node->wordcount();
    }

    int countWordsStartingWith(string &word){
        // Write your code here.
        Node* node=root;
        for(int i=0;i<word.size();i++){
            if(!node->contain(word[i])){
                return 0;
            }
            node=node->get(word[i]);
           // node->prefixcount();
        }
         return node->prefixcount();
    }

    void erase(string &word){
        // Write your code here.
         Node* node=root;
        for(int i=0;i<word.size();i++){
            node=node->get(word[i]);
            node->eraseprefix();
        }
        node->eraseend();
    }
};
