Given the root of a binary tree, return its maximum depth.

A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: 3
Example 2:

Input: root = [1,null,2]
Output: 2
 

Constraints:

The number of nodes in the tree is in the range [0, 104].
-100 <= Node.val <= 100

/* 

DFS
if(root==NULL)
           return 0;
       return 1+max(maxDepth(root->left),maxDepth(root->right));*/
      /*BFS
      if(root==NULL)
           return 0;
       queue<TreeNode*> q;
       q.push(root);
        int level=0;
        int ans=0;
       while(!q.empty()){
           level++;
           int n=q.size();
           for(int i=1;i<=n;i++){
               TreeNode* temp=q.front();
               if(temp->left)
                q.push(temp->left);
               if(temp->right)
                q.push(temp->right);
               q.pop();
               if(i==n && temp->left==NULL && temp->right==NULL)
                   ans=level;
           }
       }
     return ans;*/
    //iterative DFS 
       if(root==NULL)                ************
           return 0;
    stack<pair<TreeNode*,int>> p;
    p.push(make_pair(root,1));
    int l=1;                            **********=0
    while(!p.empty()){
        TreeNode* temp=p.top().first;
        int depth=p.top().second;
        p.pop();
        if(temp!=NULL){
            l=max(l,depth);
            p.push(make_pair(temp->left,depth+1));
            p.push(make_pair(temp->right,depth+1));
        }
    }
     return l;
    }
};
