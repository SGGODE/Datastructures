Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).

Example 1:

Input: root = [3,9,20,null,null,15,7]
Output: [[3],[20,9],[15,7]]
Example 2:

Input: root = [1]
Output: [[1]]
Example 3:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 2000].
-100 <= Node.val <= 100

class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        if(root==NULL)
            return {};
        queue<TreeNode*>q;
        q.push(root);
        vector<vector<int>> v;
        vector<int> x;
        int c=0;
        while(!q.empty()){
            int n=q.size();
         while(n--){
            TreeNode* temp=q.front();
            if(temp->right)
                q.push(temp->right);
            if(temp->left)
                q.push(temp->left);
            q.pop();
            x.push_back(temp->val);
          }
         if(c%2==0)
             reverse(x.begin(),x.end());
         v.push_back(x);
         x.clear();
         c++;
        }
        return v;
    }
};
