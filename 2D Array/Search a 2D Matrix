Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
 
Example 1:

Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int n=matrix.size();
        int m=matrix[0].size();
        int s=0;
        int e=(n*m)-1;
        int mid=s+(e-s)/2;
        while(s<=e){
            int element=matrix[mid/m][mid%m];
            if(element==target)
                return 1;
            else if(element<target)
               s=mid+1;
            else
                e=mid-1;
            mid=s+(e-s)/2;
      }
        return 0;
    }
};

 Search a 2D Matrix II
 
 Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:

Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.
 
Example 1:

Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5
Output: true

public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
       int row = matrix.size();
        int col = matrix[0].size();
        
        int ri = 0;
        int ci  = col-1;
        while(ri<row && ci>=0){
            int element=matrix[ri][ci];
            if(element==target)
                return 1;
            else if(element<target)
                ri++;
            else
                ci--;
        }
       return 0; 
    }
};
