Given an m x n matrix, return all elements of the matrix in spiral order.

Example 1:

Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]

class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector<int> ans;
        int n=matrix.size();
        int m=matrix[0].size();
        int count=0;
        int total=n*m;
        int rs=0;
        int cs=0;
        int re=n-1;
        int ec=m-1;
        while(count<total){
            //print first row
            for(int index=cs; count<total && index<=ec; index++){
                ans.push_back(matrix[rs][index]);
                count++;
            }
            rs++;
            //print last col
             for(int index=rs; count<total && index<=re; index++){
                ans.push_back(matrix[index][ec]);
                count++;
            }
            ec--;
            //print last row
             for(int index=ec; count<total && index>=cs; index--){
                ans.push_back(matrix[re][index]);
                count++;
            }
            re--;
            //print first col
             for(int index=re; count<total && index>=rs; index--){
                ans.push_back(matrix[index][cs]);
                count++;
            }
            cs++;
        }
        return ans;
    }
};



Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.

Example 1:

Input: n = 3
Output: [[1,2,3],[8,9,4],[7,6,5]]

class Solution {
public:
    vector<vector<int>> generateMatrix(int n) {
       vector<vector<int>> ans(n,vector<int>(n,1));
        int left=0;
        int right=n-1;
        int top=0;
        int down=n-1;
        int index=1;
        while(left <= right && top <= down){
            //print 1st row
             for(int i = left; i <= right; i++){
                 ans[top][i]=index;
                  index++;
             }
            top++;
            //print last col
             for(int i =top ; i <= down; i++){
                 ans[i][right]=index;
                  index++;
             }
            right--;
            //print last row
            for(int i = right; i >= left; i--){
                ans[down][i]=index;
                  index++;
            }
             down--;
            //print first col
            for(int i = down; i >= top; i--){
                ans[i][left]=index;
                  index++;
            }
             left++;
        }
        return ans;
    }
};
