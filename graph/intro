A Graph is a non-linear data structure consisting of nodes and edges. The nodes are sometimes also referred to as vertices and the edges are lines or 
arcs that connect any two nodes in the graph. More formally a Graph can be defined as,
A Graph consists of a finite set of vertices(or nodes) and a set of Edges that connect a pair of nodes.
degree of graph is number of incoming and outgoing edges from graph 
incoming indegree
outgoing outdegree
store

if there are cycles depend upon the its known as cyclic or acyclic graph such as DAG directed acyclic graph
path containes nodes and each of them is reachable
1------2
       |
       |
4 ---- 3
 1 2 3 4
 1 2 3 2 1 is not path a node can not appear twice in path
 path having ajacent node must have the edge between them 
 1 3 4 ** wrong
 
 total degree of graph is 2*E //undirected graph
  and in and out degree for the directed graph
  
  edge weight if the weight is not given then we consider the unit weight as 1

int matrix and list i.e vector cpp

matrix 
 space O(n*n)
int n,m;
//n=nodes,m=edges
cin>>n>>m;
int arr[n+1][m+1]; //one base indexing
for(int i=0;i<m;i++){  time O(m)
 int u,v;
 cin>>u>>v;
 arr[u][v]=1; //only this in directed graph
 arr[v][u]=1; //both in undirected graph
 }
 
 vector
 
 int n,m;
 cin>>n>>m;
 vector<int> arr[n+1]; //every index is empty vector
 //space O(m)  time also
 for(int i=0;i<m;i++){
  int u,v;
  cin>>u>>v;
  arr[u].push_back(v); //directed u----> vthen only one i.e this one
  arr[v].push_back(u);
  }
  
  weighted graph
  having weight of edges
    2       1
 1------>4----->6
                |  3
         6      |
    2------------5
//weighted graph traversal  //directed 
#include <iostream>
#include<bits/stdc++.h>
using namespace std;

int main() {
	// your code goes here
	int n,m;
   cin>>n>>m;
 vector<pair<int,int>> arr[n+1]; //every index is empty vector
 //space O(m)  time also
 for(int i=0;i<m;i++){
  int u,v,w;
  cin>>u>>v>>w;
  arr[u].push_back({v,w}); //directed u----> vthen only one i.e this one
  //arr[v].push_back({u,w});
  }
  for(int i=0;i<n+1;i++){
      for(auto j:arr[i]){
          cout<<j.first<<" "<<j.second<<" ";
      }
      cout<<endl;
  }
	return 0;
}
8 7
1 2 1
1 3 4
1 4 2
2 5 8
3 8 6
4 6 3
4 7 5


2 1 3 4 4 2 
5 8 
8 6 
6 3 7 5
 

