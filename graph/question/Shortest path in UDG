 vector<int> shortestPath(vector<vector<int>>& edges, int N,int M, int src){
        // code here
        vector<int>res(N,INT_MAX);
        vector<int>adj[N+1];
        for(int i=0;i<M;i++){
            adj[edges[i][0]].push_back(edges[i][1]);
           adj[edges[i][1]].push_back(edges[i][0]);
        }
        vector<bool>vis(N+1,0);
        //dfs(adj,vis,res,src,0);
        queue<pair<int,int>>pq;
        pq.push({src,0});
        while(!pq.empty()){
            int curr=pq.front().first;
            int dist=pq.front().second;
            vis[curr]=1;
            res[curr]=min(res[curr],dist);
            pq.pop();
            for(auto it:adj[curr]){
                if((dist+1)<res[it]){
                  res[it]=dist+1;
                  pq.push({it,dist+1});
                }
            }
        }
        for(int i=0;i<N;i++){
            if(res[i]==INT_MAX)res[i]=-1;
        }
        return res;
